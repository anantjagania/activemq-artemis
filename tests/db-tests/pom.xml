<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.apache.activemq.tests</groupId>
      <artifactId>artemis-tests-pom</artifactId>
      <version>2.31.0-SNAPSHOT</version>
   </parent>

   <artifactId>db-tests</artifactId>
   <packaging>jar</packaging>
   <name>Database Tests</name>

   <properties>
      <activemq.basedir>${project.basedir}/../../</activemq.basedir>
      <sts-surefire-extra-args />
      <artemis-distribuiton-lib-dir>-Ddistribution.lib="${activemq.basedir}/artemis-distribution/target/apache-artemis-${project.version}-bin/apache-artemis-${project.version}/lib"</artemis-distribuiton-lib-dir>
      <sts-http-host>localhost</sts-http-host>
      <db2.uri>jdbc:db2://localhost:50000/artemis:user=db2inst1;password=artemis;</db2.uri>
      <mysql.uri>jdbc:mysql://localhost/ARTEMIS-TEST?user=root&amp;#38;password=artemis</mysql.uri>
      <postgres.uri>jdbc:postgresql:artemis?user=artemis&amp;#38;password=artemis</postgres.uri>
      <oracle.uri>jdbc:oracle:thin:system/artemis@localhost:1521:FREE</oracle.uri>
      <mssql.uri>jdbc:sqlserver://localhost:1433;user=sa;password=ActiveMQ*Artemis</mssql.uri>
   </properties>

   <dependencies>
      <dependency>
         <!-- this dependency is here to make sure this module is only executed
              after the distribution is created.
              Otherwise it will get here before the build eventually.
              e.g if you use mvn install -T 20 -->
         <groupId>org.apache.activemq</groupId>
         <artifactId>apache-artemis</artifactId>
         <version>${project.version}</version>
         <scope>compile</scope>
         <type>pom</type>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-server</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq.tests</groupId>
         <artifactId>artemis-test-support</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-core-client</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-jms-client</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-commons</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-cli</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-journal</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>io.netty</groupId>
         <artifactId>netty-common</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.jctools</groupId>
         <artifactId>jctools-core</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.qpid</groupId>
         <artifactId>qpid-jms-client</artifactId>
         <scope>test</scope>
      </dependency>
      <!-- logging -->
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-slf4j-impl</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.fusesource.mqtt-client</groupId>
         <artifactId>mqtt-client</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.eclipse.paho</groupId>
         <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>jakarta.jms</groupId>
         <artifactId>jakarta.jms-api</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>jakarta.management.j2ee</groupId>
         <artifactId>jakarta.management.j2ee-api</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-api</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-firefox-driver</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-chrome-driver</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-chromium-driver</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-remote-driver</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-support</artifactId>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.testcontainers</groupId>
         <artifactId>selenium</artifactId>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.testcontainers</groupId>
         <artifactId>testcontainers</artifactId>
         <scope>test</scope>
      </dependency>

      <!-- The johnzon-core and json-api contents are repackaged in -commons,
           However maven can still need them during tests, which run against
           the original -commons classes when built+run in the same reactor,
           and not the jar containing the shaded bits. -->
      <dependency>
         <groupId>org.apache.johnzon</groupId>
         <artifactId>johnzon-core</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>jakarta.json</groupId>
         <artifactId>jakarta.json-api</artifactId>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-unit-test-support</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>

   </dependencies>

   <build>
       <plugins>
         <plugin>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-maven-plugin</artifactId>
            <executions>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-jdbc-bad-driver</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>admin</user>
                     <password>admin</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>true</noWeb>
                     <instance>${basedir}/target/jdbc-bad-driver</instance>
                     <args>
                        <arg>--http-host</arg>
                        <arg>${sts-http-host}</arg>
                        <arg>--http-port</arg>
                        <arg>8161</arg>
                        <arg>--shared-store</arg>
                        <arg>--jdbc</arg>
                        <arg>--jdbc-connection-url</arg>
                        <arg>tcp://noexist</arg>
                        <arg>--jdbc-driver-class-name</arg>
                        <arg>badDriver</arg>
                     </args>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-derby</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <!-- this makes it easier in certain envs -->
                     <javaOptions>-Djava.net.preferIPv4Stack=true</javaOptions>
                     <instance>${basedir}/target/derby</instance>
                     <configuration>${basedir}/target/classes/servers/derby</configuration>
                     <libList>
                        <arg>org.apache.derby:derby:${apache.derby.version}</arg>
                     </libList>
                     <args>
                        <arg>--jdbc</arg>
                        <arg>--global-max-messages</arg>
                        <arg>100</arg>
                        <arg>--java-options</arg>
                        <arg>-ea</arg>
                     </args>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-mysql</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <!-- this makes it easier in certain envs -->
                     <javaOptions>-Djava.net.preferIPv4Stack=true</javaOptions>
                     <instance>${basedir}/target/mysql</instance>
                     <configuration>${basedir}/target/classes/servers/mysql</configuration>
                     <libListWithDeps>
                        <arg>com.mysql:mysql-connector-j:8.0.33</arg>
                     </libListWithDeps>
                     <args>
                        <arg>--jdbc</arg>
                        <arg>--jdbc-connection-url</arg>
                        <arg>${mysql.uri}</arg>
                        <arg>--jdbc-driver-class-name</arg>
                        <arg>com.mysql.cj.jdbc.Driver</arg>
                        <arg>--global-max-messages</arg>
                        <arg>100</arg>
                        <arg>--java-options</arg>
                        <arg>-ea</arg>
                     </args>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-postgres</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <!-- this makes it easier in certain envs -->
                     <javaOptions>-Djava.net.preferIPv4Stack=true</javaOptions>
                     <instance>${basedir}/target/postgres</instance>
                     <configuration>${basedir}/target/classes/servers/postgres</configuration>
                     <libListWithDeps>
                        <arg>org.postgresql:postgresql:42.6.0</arg>
                     </libListWithDeps>
                     <args>
                        <arg>--jdbc</arg>
                        <arg>--jdbc-connection-url</arg>
                        <arg>${postgres.uri}</arg>
                        <arg>--jdbc-driver-class-name</arg>
                        <arg>org.postgresql.Driver</arg>
                        <arg>--global-max-messages</arg>
                        <arg>100</arg>
                        <arg>--java-options</arg>
                        <arg>-ea</arg>
                     </args>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-oracle</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <!-- this makes it easier in certain envs -->
                     <javaOptions>-Djava.net.preferIPv4Stack=true</javaOptions>
                     <instance>${basedir}/target/oracle</instance>
                     <libFolders>
                        <!-- you must download the driver here manually before you can use it -->
                        <arg>${project.basedir}/jdbc-drivers/oracle</arg>
                     </libFolders>
                     <args>
                        <arg>--jdbc</arg>
                        <arg>--jdbc-connection-url</arg>
                        <arg>${oracle.uri}</arg>
                        <arg>--jdbc-driver-class-name</arg>
                        <arg>oracle.jdbc.driver.OracleDriver</arg>
                        <arg>--global-max-messages</arg>
                        <arg>100</arg>
                        <arg>--java-options</arg>
                        <arg>-ea</arg>
                     </args>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-mssql</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <libList>
                        <arg>com.microsoft.sqlserver:mssql-jdbc:8.4.1.jre11</arg>
                     </libList>
                     <!-- this makes it easier in certain envs -->
                     <javaOptions>-Djava.net.preferIPv4Stack=true</javaOptions>
                     <instance>${basedir}/target/mssql</instance>
                     <args>
                        <arg>--jdbc</arg>
                        <arg>--jdbc-connection-url</arg>
                        <arg>${mssql.uri}</arg>
                        <arg>--jdbc-driver-class-name</arg>
                        <arg>com.microsoft.sqlserver.jdbc.SQLServerDriver</arg>
                        <arg>--global-max-messages</arg>
                        <arg>100</arg>
                        <arg>--java-options</arg>
                        <arg>-ea</arg>
                     </args>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-DB2</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <libList>
                        <arg>com.ibm.db2:jcc:11.5.8.0</arg>
                     </libList>
                     <!-- <libFolders>
                        <arg>${project.basedir}/jdbc-drivers/db2</arg>
                     </libFolders> -->
                     <!-- this makes it easier in certain envs -->
                     <javaOptions>-Djava.net.preferIPv4Stack=true</javaOptions>
                     <instance>${basedir}/target/db2</instance>
                     <args>
                        <arg>--jdbc</arg>
                        <arg>--jdbc-connection-url</arg>
                        <arg>${db2.uri}</arg>
                        <arg>--jdbc-driver-class-name</arg>
                        <arg>com.ibm.db2.jcc.DB2Driver</arg>
                        <arg>--global-max-messages</arg>
                        <arg>100</arg>
                        <arg>--java-options</arg>
                        <arg>-ea</arg>
                     </args>
                  </configuration>
               </execution>
            </executions>
            <dependencies>
               <dependency>
                  <groupId>org.apache.activemq.tests</groupId>
                  <artifactId>smoke-tests</artifactId>
                  <version>${project.version}</version>
               </dependency>
            </dependencies>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
               <forkCount>1</forkCount>
               <reuseForks>false</reuseForks>
               <skipTests>${skipSmokeTests}</skipTests>
               <argLine>${sts-surefire-extra-args} ${activemq-surefire-argline} ${artemis-distribuiton-lib-dir}</argLine>
            </configuration>
         </plugin>
      </plugins>
   </build>

   <profiles>
      <profile>
         <id>jdk16on</id>
         <activation>
            <jdk>[16,)</jdk>
         </activation>
         <properties>
            <sts-surefire-extra-args>--add-opens=java.management.rmi/javax.management.remote.rmi=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.server=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</sts-surefire-extra-args>
         </properties>
      </profile>

      <profile>
         <!-- Quick subset of tests, used on PR checks -->
         <id>fast-tests</id>
         <build>
            <pluginManagement>
               <plugins>
                  <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-surefire-plugin</artifactId>
                     <configuration>
                        <forkCount>1</forkCount>
                        <reuseForks>false</reuseForks>
                        <includes combine.children="override">
                           <include>**/smoke/upgradeTest/*Test.java</include>
                        </includes>
                     </configuration>
                  </plugin>
               </plugins>
            </pluginManagement>
         </build>
      </profile>

   </profiles>

</project>
